import {
  Fragment,
  Teleport,
  Transition,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createVNode,
  defineComponent,
  normalizeStyle,
  openBlock,
  reactive,
  ref,
  renderList,
  toDisplayString,
  unref,
  watchEffect,
  withCtx,
  withModifiers
} from "./chunk-JZK7L3UB.js";

// node_modules/@steveyuowo/vue-hot-toast/dist/vue-hot-toast.es.js
var E = ["onClick"];
var j = { class: "VueHotToast__icon" };
var S = {
  key: 0,
  class: "VueHotToast__checkmark"
};
var I = {
  key: 1,
  class: "VueHotToast__error"
};
var B = {
  key: 2,
  class: "VueHotToast__loading"
};
var D = { class: "content" };
var M = { class: "content-message" };
var N = defineComponent({
  __name: "ToasterItem",
  props: {
    id: {},
    type: {},
    message: {},
    autoClose: { type: Boolean },
    duration: {}
  },
  emits: ["close"],
  setup(t, { emit: e }) {
    const o = t, s = ref(null), r = ref(0), p = ref(0), f = () => {
      e("close");
    };
    return watchEffect(() => {
      o.autoClose && (r.value = Date.now(), p.value = o.duration, s.value = setTimeout(f, p.value));
    }), (i, F) => (openBlock(), createElementBlock("div", {
      class: "VueHotToast__toast",
      style: normalizeStyle(`--toast-duration: ${i.duration}s;`),
      onClick: withModifiers(f, ["prevent"])
    }, [
      createBaseVNode("div", j, [
        i.type === "success" ? (openBlock(), createElementBlock("div", S)) : createCommentVNode("", true),
        i.type === "error" ? (openBlock(), createElementBlock("div", I)) : createCommentVNode("", true),
        i.type === "loading" ? (openBlock(), createElementBlock("div", B)) : createCommentVNode("", true)
      ]),
      createBaseVNode("div", D, [
        createBaseVNode("div", M, toDisplayString(i.message), 1)
      ])
    ], 12, E));
  }
});
var U = {
  type: "info",
  message: "Here's your toast.",
  autoClose: true,
  duration: 3e3
};
function $() {
  let t = (/* @__PURE__ */ new Date()).getTime();
  var e = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
    /[xy]/g,
    function(o) {
      var s = (t + Math.random() * 16) % 16 | 0;
      return t = Math.floor(t / 16), (o == "x" ? s : s & 3 | 8).toString(16);
    }
  );
  return e;
}
var a = reactive({
  notifications: []
});
var _ = function() {
  const t = (e) => {
    const o = Object.assign({ ...U }, e), s = $();
    return a.notifications.push(
      {
        id: s,
        ...o
      }
    ), s;
  };
  return t.update = (e, o) => {
    const s = a.notifications.findIndex(
      (r) => r.id === e
    );
    if (s === -1)
      throw t(o), new Error("Can't find toast");
    return Object.assign(a.notifications[s], o), e;
  }, t._handleOptions = (e, o) => {
    const s = Object.assign(o ?? {}, { type: e });
    return t(s);
  }, t.loading = (e, o) => t._handleOptions(
    "loading",
    Object.assign(o ?? {}, { message: e })
  ), t.success = (e, o) => t._handleOptions(
    "success",
    Object.assign(o ?? {}, { message: e })
  ), t.error = (e, o) => t._handleOptions(
    "error",
    Object.assign(o ?? {}, { message: e })
  ), t.promise = (e, o) => {
    const s = t.loading(o.loading);
    return e.then((r) => (t.update(s, {
      message: o.success,
      type: "success"
    }), s)).catch((r) => {
      throw t.update(s, {
        message: o.error,
        type: "error"
      }), r;
    });
  }, t;
}();
var L = (t) => {
  const e = a.notifications.findIndex((o) => o.id === t);
  e !== -1 && a.notifications.splice(e, 1);
};
var z = { class: "VueHotToast__toast-container" };
var R = defineComponent({
  __name: "Toaster",
  setup(t) {
    return (e, o) => (openBlock(), createBlock(Teleport, { to: "body" }, [
      createVNode(Transition, {
        name: "VueHotToast__teleport-transition",
        tag: "div",
        class: "VueHotToast__teleport-transition"
      }, {
        default: withCtx(() => [
          createBaseVNode("div", z, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(a).notifications, (s) => (openBlock(), createBlock(N, {
              key: s.id,
              id: s.id,
              type: s.type,
              message: s.message,
              "auto-close": s.autoClose,
              duration: s.duration,
              onClose: () => {
                unref(L)(s.id);
              }
            }, null, 8, ["id", "type", "message", "auto-close", "duration", "onClose"]))), 128))
          ])
        ]),
        _: 1
      })
    ]));
  }
});
function q(t) {
  return _.loading(t, {
    autoClose: false
  });
}
function G(t, e) {
  _.update(e, {
    message: t,
    type: "success",
    autoClose: true,
    duration: 3e3
  });
}
function K(t, e) {
  _.update(e, {
    message: A(t),
    type: "error",
    autoClose: true,
    duration: 3e3
  });
}
function A(t) {
  if (!t)
    return "Undefined Error";
  if (typeof t == "string")
    return t;
  if (t instanceof Error) {
    const e = t;
    return e.reason ?? e.message;
  } else
    return JSON.stringify(t);
}
export {
  R as Toaster,
  _ as toast,
  K as toastError,
  q as toastLoading,
  G as toastSuccess
};
//# sourceMappingURL=@steveyuowo_vue-hot-toast.js.map
