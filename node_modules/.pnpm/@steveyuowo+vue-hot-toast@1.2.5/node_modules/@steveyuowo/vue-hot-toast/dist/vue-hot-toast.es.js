import { defineComponent as x, ref as d, watchEffect as h, openBlock as n, createElementBlock as i, normalizeStyle as m, withModifiers as y, createElementVNode as u, createCommentVNode as v, toDisplayString as T, reactive as C, createBlock as f, Teleport as O, createVNode as k, Transition as V, withCtx as w, Fragment as H, renderList as b, unref as g } from "vue";
const E = ["onClick"], j = { class: "VueHotToast__icon" }, I = { key: 0 }, S = ["src"], B = {
  key: 1,
  class: "VueHotToast__checkmark"
}, D = {
  key: 2,
  class: "VueHotToast__error"
}, M = {
  key: 3,
  class: "VueHotToast__loading"
}, N = { class: "content" }, U = { class: "content-message" }, $ = /* @__PURE__ */ x({
  __name: "ToasterItem",
  props: {
    id: {},
    type: {},
    message: {},
    autoClose: { type: Boolean },
    duration: {},
    icon: {}
  },
  emits: ["close"],
  setup(t, { emit: e }) {
    const s = t, o = d(null), r = d(0), _ = d(0), p = () => {
      e("close");
    };
    return h(() => {
      s.autoClose && (r.value = Date.now(), _.value = s.duration, o.value = setTimeout(p, _.value));
    }), (a, R) => (n(), i("div", {
      class: "VueHotToast__toast",
      style: m(`--toast-duration: ${a.duration}s;`),
      onClick: y(p, ["prevent"])
    }, [
      u("div", j, [
        a.icon ? (n(), i("div", I, [
          u("img", {
            class: "VueHotToast__custom-icon",
            src: a.icon,
            width: 24,
            height: 24,
            alt: "Toast Icon"
          }, null, 8, S)
        ])) : a.type === "success" ? (n(), i("div", B)) : a.type === "error" ? (n(), i("div", D)) : a.type === "loading" ? (n(), i("div", M)) : v("", !0)
      ]),
      u("div", N, [
        u("div", U, T(a.message), 1)
      ])
    ], 12, E));
  }
}), L = {
  type: "info",
  message: "Here's your toast.",
  autoClose: !0,
  duration: 3e3
};
function z() {
  let t = (/* @__PURE__ */ new Date()).getTime();
  var e = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(
    /[xy]/g,
    function(s) {
      var o = (t + Math.random() * 16) % 16 | 0;
      return t = Math.floor(t / 16), (s == "x" ? o : o & 3 | 8).toString(16);
    }
  );
  return e;
}
const c = C({
  notifications: []
}), l = function() {
  const t = (e) => {
    const s = Object.assign({ ...L }, e), o = z();
    return c.notifications.push(
      {
        id: o,
        ...s
      }
    ), o;
  };
  return t.update = (e, s) => {
    const o = c.notifications.findIndex(
      (r) => r.id === e
    );
    if (o === -1)
      throw t(s), new Error("Can't find toast");
    return Object.assign(c.notifications[o], s), e;
  }, t._handleOptions = (e, s) => {
    const o = Object.assign(s ?? {}, { type: e });
    return t(o);
  }, t.loading = (e, s) => t._handleOptions(
    "loading",
    Object.assign(s ?? {}, { message: e })
  ), t.success = (e, s) => t._handleOptions(
    "success",
    Object.assign(s ?? {}, { message: e })
  ), t.error = (e, s) => t._handleOptions(
    "error",
    Object.assign(s ?? {}, { message: e })
  ), t.promise = (e, s) => {
    const o = t.loading(s.loading);
    return e.then((r) => (t.update(o, {
      message: s.success,
      type: "success"
    }), o)).catch((r) => {
      throw t.update(o, {
        message: s.error,
        type: "error"
      }), r;
    });
  }, t;
}(), A = (t) => {
  const e = c.notifications.findIndex((s) => s.id === t);
  e !== -1 && c.notifications.splice(e, 1);
}, F = { class: "VueHotToast__toast-container" }, G = /* @__PURE__ */ x({
  __name: "Toaster",
  setup(t) {
    return (e, s) => (n(), f(O, { to: "body" }, [
      k(V, {
        name: "VueHotToast__teleport-transition",
        tag: "div",
        class: "VueHotToast__teleport-transition"
      }, {
        default: w(() => [
          u("div", F, [
            (n(!0), i(H, null, b(g(c).notifications, (o) => (n(), f($, {
              key: o.id,
              id: o.id,
              type: o.type,
              message: o.message,
              "auto-close": o.autoClose,
              duration: o.duration,
              icon: o.icon,
              onClose: () => {
                g(A)(o.id);
              }
            }, null, 8, ["id", "type", "message", "auto-close", "duration", "icon", "onClose"]))), 128))
          ])
        ]),
        _: 1
      })
    ]));
  }
});
function K(t) {
  return l.loading(t, {
    autoClose: !1
  });
}
function P(t, e) {
  l.update(e, {
    message: t,
    type: "success",
    autoClose: !0,
    duration: 3e3
  });
}
function Q(t, e) {
  l.update(e, {
    message: J(t),
    type: "error",
    autoClose: !0,
    duration: 3e3
  });
}
function J(t) {
  if (!t)
    return "Undefined Error";
  if (typeof t == "string")
    return t;
  if (t instanceof Error) {
    const e = t;
    return e.reason ?? e.message;
  } else
    return JSON.stringify(t);
}
export {
  G as Toaster,
  l as toast,
  Q as toastError,
  K as toastLoading,
  P as toastSuccess
};
